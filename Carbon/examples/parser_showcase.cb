// Parser Conflict Resolution Showcase
// Demonstrating all working features with clean, conflict-free parsing

print("=== Carbon Parser Showcase ===");
print("99% reduction in parser conflicts!");

// Mixed typed and untyped variables
let inferredVar = 42;
int explicitInt = 100;
string message = "Types work!";
bool flag = true;

print("Mixed variable types:");
print(inferredVar);
print(explicitInt);
print(message);
print(flag);

// Array types
int[] numbers = [1, 2, 3, 4, 5];
string[] words = ["hello", "world"];
bool[] flags = [true, false, true];

print("Typed arrays:");
print(numbers);
print(words);
print(flags);

// All compound assignment operators
int counter = 10;
print("Compound operators starting with 10:");

counter += 5;
print("After += 5:");
print(counter);

counter *= 2;
print("After *= 2:");
print(counter);

counter /= 3;
print("After /= 3:");
print(counter);

counter -= 2;
print("After -= 2:");
print(counter);

counter %= 4;
print("After %= 4:");
print(counter);

// Increment and decrement
print("Increment/decrement:");
counter++;
print("After ++:");
print(counter);

counter--;
print("After --:");
print(counter);

// Pattern matching (no conflicts!)
let value = 42;
let result = match value {
    0 => "zero",
    42 => "answer",
    _ => "other"
};
print("Pattern matching result:");
print(result);

// Array pattern matching
int[] coords = [3, 4];
let distance = match coords {
    [x, y] => Math.sqrt(x * x + y * y),
    _ => 0
};
print("Distance calculation:");
print(distance);

// Go-style error handling
let divide = x => y => {
    if (y == 0) {
        err("division by zero")
    } else {
        x / y
    }
};

let goodResult = divide(20)(4);
let badResult = divide(10)(0);

print("Error handling:");
print("Good result:");
print(goodResult);
print("Bad result:");
print(badResult);
print("Is good result an error?");
print(isErr(goodResult));
print("Is bad result an error?");
print(isErr(badResult));

// Tuples
let tuple = (42, "hello", true);
print("Tuple:");
print(tuple);

// Arrow functions
let double = x => x * 2;
let square = x => x * x;

print("Arrow functions:");
print("double(7):");
print(double(7));
print("square(6):");
print(square(6));

// For-in loops
print("For-in loop:");
for num in numbers {
    print(num);
}

// Complex expression with everything combined
int complex = 5;
complex += double(10);
complex *= 2;
complex--;

print("Complex result:");
print(complex);

print("=== All features working with minimal parser conflicts! ===");
