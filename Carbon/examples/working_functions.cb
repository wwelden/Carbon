// Working Functions Demo - Using Current Carbon Syntax
// This demonstrates functions that actually work with the current implementation

// Simple function that adds a constant
let addSeven = x => x + 7;

// Function that processes arrays using for-in loops
let processArray = arr => {
    for item in arr {
        print(item);
    }
};

// Function that finds an item in an array
let findTen = arr => {
    for item in arr {
        if (item == 10) {
            print("found 10!");
        }
    }
};

// Function that counts up using our new operators
let countUp = limit => {
    let count = 0;
    // We can't do while loops yet, so let's simulate with recursion
    let counter = x => {
        if (x < limit) {
            print(x);
            x++;
            counter(x);
        } else {
            print("done counting");
        }
    };
    counter(count);
};

// Testing our functions
print("=== Working Functions Demo ===");

print("Testing addSeven:");
let result = addSeven(5);
print(result);

print("Testing array processing:");
let numbers = [1, 2, 10, 4, 5];
processArray(numbers);

print("Testing findTen:");
findTen(numbers);

print("Testing compound operators in functions:");
let x = 5;
x += addSeven(3);  // x = 5 + (3 + 7) = 15
print("x after compound operation:");
print(x);

print("Testing increment/decrement:");
let counter = 10;
counter++;
print("After increment:");
print(counter);
counter--;
print("After decrement:");
print(counter);

print("=== Demo Complete ===");
