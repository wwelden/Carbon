// Advanced Pattern Matching Examples

// Simple pattern matching for grades (without ranges for now)
fn getGrade(int score) -> string {
    match score {
        100 => "A+",
        95 => "A",
        85 => "B",
        75 => "C",
        65 => "D",
        _ => "Other grade"
    }
}

// Test grade function
for score in [95, 85, 75, 65, 55] {
    print("Score " + toString(score) + " = Grade " + getGrade(score));
}

// Array pattern matching instead of tuples for now
fn analyzePoint(array point) -> string {
    match point {
        [0, 0] => "Origin",
        [x, 0] => "On X-axis at " + toString(x),
        [0, y] => "On Y-axis at " + toString(y),
        [x, y] => "Point at (" + toString(x) + ", " + toString(y) + ")"
    }
}

// Test array patterns as points
let points = [[0, 0], [5, 0], [0, -3], [2, 4]];
for point in points {
    print(analyzePoint(point));
}

// Complex array pattern matching with mixed types
fn processData(array data) -> string {
    match data {
        [] => "Empty array",
        [x] => "Single element: " + toString(x),
        [first, second] => "Two elements: " + toString(first) + ", " + toString(second),
        [first, _, last] => "Three elements: first=" + toString(first) + ", last=" + toString(last),
        _ => "Array with " + toString(data.len) + " elements"
    }
}

// Test array patterns
let testArrays = [
    [],
    [42],
    ["hello", "world"],
    [1, 2, 3],
    [10, 20, 30, 40, 50]
];

for arr in testArrays {
    print(processData(arr));
}

// Pattern matching with error handling
fn safeDivide(int a, int b) -> string {
    let result = if (b == 0) { err("Division by zero") } else { a / b };

    match result {
        error => "Error: " + toString(error),
        value => "Result: " + toString(value)
    }
}

// Test error handling patterns
print(safeDivide(10, 2));  // Should show result
print(safeDivide(10, 0));  // Should show error

// Nested pattern matching
fn categorizeNumber(int n) -> string {
    match [n % 2, n % 3] {
        [0, 0] => toString(n) + " is divisible by both 2 and 3",
        [0, _] => toString(n) + " is even",
        [_, 0] => toString(n) + " is divisible by 3",
        [1, 1] => toString(n) + " leaves remainder 1 when divided by 2 and 3",
        [1, 2] => toString(n) + " is odd and leaves remainder 2 when divided by 3",
        _ => toString(n) + " has other properties"
    }
}

// Test nested patterns
for num in [6, 8, 9, 7, 13] {
    print(categorizeNumber(num));
}
