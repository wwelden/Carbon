// Test both Haskell-style map function and Map data structure
print("Testing map function vs Map data structure:");

// Test Haskell-style map function (higher-order function)
print("=== Higher-Order map Function ===");
let numbers = [1, 2, 3, 4, 5];
let double = x => x * 2;
let add10 = x => x + 10;

// Using map like in Haskell: map(function)(array)
let doubled = map(double)(numbers);
print("Original array: " + toString(numbers));
print("Doubled with map: " + toString(doubled));

let incremented = map(add10)(numbers);
print("Add 10 with map: " + toString(incremented));

// Chain map operations like in Haskell
let chainedResult = map(add10)(map(double)(numbers));
print("Chained (double then add 10): " + toString(chainedResult));

// Test Map data structure (dictionary/hash map)
print("=== Map Data Structure ===");
let person = Map{"name": "Alice", "age": 30, "city": "New York"};
print("Person map: " + toString(person));
print("Person map size: " + toString(person.size()));

// Test that they don't conflict
print("=== No Naming Conflicts ===");
let words = ["hello", "world"];
let toUpper = s => s; // Simple identity for demo (no built-in uppercase)
let mappedWords = map(toUpper)(words);
print("Mapped words: " + toString(mappedWords));

// Create a map that stores arrays
let arrayMap = Map{"numbers": [1, 2, 3], "letters": ["a", "b", "c"]};
print("Map containing arrays: " + toString(arrayMap));

print("Both map function and Map data structure work together!");
